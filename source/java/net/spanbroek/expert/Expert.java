package net.spanbroek.expert;

import org.apache.commons.cli.*;
import java.util.*;
import java.io.*;

/**
 * Contains a command line interface to the <code>InferenceEngine</code>.
 */
public class Expert {

    /**
     * The command line options.
     */
    static private final Options options = new Options()
      .addOption(OptionBuilder
        .hasArg()
        .isRequired()
        .withArgName("knowledge file")
        .withDescription("the xml file that contains knowledge")
        .withLongOpt("knowledge")
        .withType(new File(""))
        .create('k')
      )
      .addOption(OptionBuilder
        .hasArg()
        .withArgName("input file")
        .withDescription("the input properties file")
        .withLongOpt("input")
        .withType(new File(""))
        .create('i')
      )
      .addOption(OptionBuilder
        .hasArg()
        .withArgName("output file")
        .withDescription("the output properties file")
        .withLongOpt("output")
        .withType(new File(""))
        .create('o')
      );

    /**
     * Reads a property file from either standard input or a file, infers more
     * knowledge using a knowledge graph xml file, and writes the result to
     * either standard output or another file.
     */
    static public void main(String[] arguments)
      throws IOException, InferenceEngine.ParsingException {
        // parse command line options
        CommandLine commandLine = null;
        try {
            commandLine = new GnuParser().parse(options, arguments);
        }
        catch(ParseException exception) {
            // print usage
            PrintWriter out = new PrintWriter(System.out);
            new HelpFormatter().printUsage(out, 80, "expert", options);
            out.println();
            new HelpFormatter().printOptions(out, 80, options, 4, 4);
            out.flush();
        }
        if (commandLine != null) {
            InputStream input = null;
            OutputStream output = null;
            try {
                // open input stream
                input = commandLine.hasOption('i') ?
                  new FileInputStream(commandLine.getOptionValue('i')) :
                  System.in;
                // open output stream
                output = commandLine.hasOption('o') ?
                  new FileOutputStream(commandLine.getOptionValue('o')) :
                  (OutputStream)System.out;
                // read knowledge graph
                InferenceEngine knowledge
                  = new InferenceEngine(commandLine.getOptionValue('k'));
                // infer knowledge
                Properties properties = new Properties();
                properties.load(input);
                knowledge.infer(properties);
                properties.store(output, "generated by expert");
            }
            finally {
                if (input != null) {
                    try { input.close(); } catch(IOException exception) {}
                }
                if (output != null) {
                    try { output.close(); } catch(IOException exception) {}
                }
            }
        }
    }

}
